//
//  Thumbnail.swift
//  convolutions_videoanim
//
//  Created by Jake Landers on 3/5/23.
//

import SwiftUI

struct Thumbnail: View {
    let arr1: [[[Double]]] = [[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [80, 0, 0], [80, 0, 0], [80, 0, 0], [80, 0, 0], [80, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [80, 0, 0], [80, 0, 0], [248, 64, 112], [248, 64, 112], [248, 64, 112], [248, 216, 112], [248, 64, 112], [80, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [80, 0, 0], [248, 64, 112], [248, 64, 112], [176, 40, 96], [176, 40, 96], [216, 160, 56], [248, 216, 112], [248, 248, 248], [80, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [80, 0, 0], [176, 40, 96], [248, 64, 112], [176, 40, 96], [176, 40, 96], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [80, 0, 0], [176, 40, 96], [176, 40, 96], [176, 40, 96], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [80, 0, 0], [248, 208, 192], [0, 0, 0], [0, 0, 0], [0, 0, 0], [248, 112, 104], [0, 0, 0], [248, 112, 104], [0, 0, 0], [248, 112, 104], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[80, 0, 0], [248, 208, 192], [136, 88, 24], [248, 208, 192], [0, 0, 0], [248, 112, 104], [248, 208, 192], [0, 0, 0], [248, 208, 192], [0, 0, 0], [248, 208, 192], [136, 88, 24], [136, 88, 24], [0, 0, 0]], [[80, 0, 0], [248, 112, 104], [136, 88, 24], [248, 208, 192], [0, 0, 0], [0, 0, 0], [248, 208, 192], [248, 208, 192], [248, 208, 192], [248, 208, 192], [248, 208, 192], [248, 208, 192], [248, 208, 192], [136, 88, 24]], [[80, 0, 0], [0, 0, 0], [248, 112, 104], [248, 208, 192], [0, 0, 0], [248, 208, 192], [248, 208, 192], [0, 0, 0], [248, 112, 104], [248, 112, 104], [248, 112, 104], [248, 112, 104], [248, 112, 104], [136, 88, 24]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [248, 112, 104], [248, 112, 104], [248, 208, 192], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [136, 88, 24], [136, 88, 24], [248, 112, 104], [248, 112, 104], [248, 112, 104], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [80, 0, 0], [176, 40, 96], [136, 88, 24], [136, 88, 24], [136, 88, 24], [136, 88, 24], [32, 48, 136], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [80, 0, 0], [176, 40, 96], [176, 40, 96], [248, 64, 112], [64, 128, 152], [64, 128, 152], [128, 216, 200], [128, 216, 200], [32, 48, 136], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [80, 0, 0], [136, 88, 24], [136, 88, 24], [136, 88, 24], [64, 128, 152], [248, 248, 248], [248, 248, 248], [128, 216, 200], [248, 248, 248], [32, 48, 136], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [136, 88, 24], [248, 248, 248], [248, 248, 248], [248, 248, 248], [136, 88, 24], [248, 248, 248], [248, 248, 248], [128, 216, 200], [248, 248, 248], [32, 48, 136], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [136, 88, 24], [248, 248, 248], [248, 248, 248], [136, 88, 24], [64, 128, 152], [64, 128, 152], [64, 128, 152], [128, 216, 200], [128, 216, 200], [32, 48, 136], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [136, 88, 24], [248, 248, 248], [248, 248, 248], [136, 88, 24], [64, 128, 152], [64, 128, 152], [32, 48, 136], [64, 128, 152], [32, 48, 136], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [136, 88, 24], [136, 88, 24], [136, 88, 24], [136, 88, 24], [0, 0, 0], [136, 88, 24], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [136, 88, 24], [136, 88, 24], [136, 88, 24], [248, 216, 112], [0, 0, 0], [248, 216, 112], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]]
    
    let arr2: [[Double]] = [[0, 0, 0, 0, 0, 0, 0.09411764705882353, 0.09411764705882353, 0.09411764705882353, 0.09411764705882353, 0.09411764705882353, 0, 0, 0], [0, 0, 0, 0, 0.09411764705882353, 0.09411764705882353, 0.48627450980392156, 0.48627450980392156, 0.48627450980392156, 0.8392156862745098, 0.48627450980392156, 0.09411764705882353, 0, 0], [0, 0, 0, 0.09411764705882353, 0.48627450980392156, 0.48627450980392156, 0.3411764705882353, 0.3411764705882353, 0.6470588235294118, 0.8392156862745098, 0.9725490196078431, 0.09411764705882353, 0, 0], [0, 0, 0.09411764705882353, 0.3411764705882353, 0.48627450980392156, 0.3411764705882353, 0.3411764705882353, 0, 0, 0, 0, 0, 0, 0], [0, 0.09411764705882353, 0.3411764705882353, 0.3411764705882353, 0.3411764705882353, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0.09411764705882353, 0.8549019607843137, 0, 0, 0, 0.596078431372549, 0, 0.596078431372549, 0, 0.596078431372549, 0, 0, 0], [0.09411764705882353, 0.8549019607843137, 0.37254901960784315, 0.8549019607843137, 0, 0.596078431372549, 0.8549019607843137, 0, 0.8549019607843137, 0, 0.8549019607843137, 0.37254901960784315, 0.37254901960784315, 0], [0.09411764705882353, 0.596078431372549, 0.37254901960784315, 0.8549019607843137, 0, 0, 0.8549019607843137, 0.8549019607843137, 0.8549019607843137, 0.8549019607843137, 0.8549019607843137, 0.8549019607843137, 0.8549019607843137, 0.37254901960784315], [0.09411764705882353, 0, 0.596078431372549, 0.8549019607843137, 0, 0.8549019607843137, 0.8549019607843137, 0, 0.596078431372549, 0.596078431372549, 0.596078431372549, 0.596078431372549, 0.596078431372549, 0.37254901960784315], [0, 0, 0, 0.596078431372549, 0.596078431372549, 0.8549019607843137, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0.37254901960784315, 0.37254901960784315, 0.596078431372549, 0.596078431372549, 0.596078431372549, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0.09411764705882353, 0.3411764705882353, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0.20784313725490197, 0, 0, 0, 0], [0, 0, 0.09411764705882353, 0.3411764705882353, 0.3411764705882353, 0.48627450980392156, 0.4392156862745098, 0.4392156862745098, 0.7372549019607844, 0.7372549019607844, 0.20784313725490197, 0, 0, 0], [0, 0, 0.09411764705882353, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0.4392156862745098, 0.9725490196078431, 0.9725490196078431, 0.7372549019607844, 0.9725490196078431, 0.20784313725490197, 0, 0], [0, 0, 0.37254901960784315, 0.9725490196078431, 0.9725490196078431, 0.9725490196078431, 0.37254901960784315, 0.9725490196078431, 0.9725490196078431, 0.7372549019607844, 0.9725490196078431, 0.20784313725490197, 0, 0], [0, 0, 0.37254901960784315, 0.9725490196078431, 0.9725490196078431, 0.37254901960784315, 0.4392156862745098, 0.4392156862745098, 0.4392156862745098, 0.7372549019607844, 0.7372549019607844, 0.20784313725490197, 0, 0], [0, 0, 0.37254901960784315, 0.9725490196078431, 0.9725490196078431, 0.37254901960784315, 0.4392156862745098, 0.4392156862745098, 0.20784313725490197, 0.4392156862745098, 0.20784313725490197, 0, 0, 0], [0, 0, 0, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0, 0.37254901960784315, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.37254901960784315, 0.37254901960784315, 0.37254901960784315, 0.8392156862745098, 0, 0.8392156862745098, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    
    @State private var arr3: [[Double]] = []
    // blur
    private let kernel: [[Double]] = [[1/4,1/4],[1/4,1/4]]
    // edge
//    private let kernel: [[Double]] = [[-1/4,1/4],[-1/4,1/4]]
    @State private var currentIndexes: [[Int]] = []
    
    var body: some View {
        HStack(spacing: 100) {
            VStack(alignment: .center, spacing: 1) {
                ForEach(Array(zip(arr1.indices, arr1)), id: \.0) { i, iitem in
                    HStack(alignment: .center, spacing: 1) {
                        ForEach(Array(zip(iitem.indices, iitem)), id: \.0) { j, jitem in
                            RoundedRectangle(cornerRadius: 5, style: .continuous)
                                .foregroundColor(Color(red: jitem[0] / 255, green: jitem[1] / 255, blue: jitem[2] / 255))
                            .aspectRatio(1, contentMode: .fit)
                        }
                    }
                }
            }
            VStack(alignment: .center, spacing: 1) {
                ForEach(Array(zip(arr2.indices, arr2)), id: \.0) { i, iitem in
                    HStack(alignment: .center, spacing: 1) {
                        ForEach(Array(zip(iitem.indices, iitem)), id: \.0) { j, jitem in
                            ZStack {
                                RoundedRectangle(cornerRadius: 5, style: .continuous)
                                    .foregroundColor(.black)
                                RoundedRectangle(cornerRadius: 5, style: .continuous)
                                    .foregroundColor(Color.white)
                                    .opacity(jitem)
                            }
                            .aspectRatio(1, contentMode: .fit)
                            
                        }
                    }
                }
            }
            HStack(spacing: 10) {
                Text("*")
                Text("[[1/4, 1/4]\n [1/4, 1/4]]")
                Text("=")
            }
            .font(Font.system(size: 50, weight: .semibold, design: Font.Design.monospaced))
            // blur
            VStack(alignment: .center, spacing: 1) {
                ForEach(Array(zip(arr3.indices, arr3)), id: \.0) { i, iitem in
                    HStack(alignment: .center, spacing: 1) {
                        ForEach(Array(zip(iitem.indices, iitem)), id: \.0) { j, jitem in
                            ZStack {
                                RoundedRectangle(cornerRadius: 5, style: .continuous)
                                    .foregroundColor(.black)
                                RoundedRectangle(cornerRadius: 5, style: .continuous)
                                    .foregroundColor(Color.white)
                                    .opacity(jitem)
                            }
                            .aspectRatio(1, contentMode: .fit)
                            
                        }
                    }
                }
            }
            // edge
//            VStack(alignment: .center, spacing: 1) {
//                ForEach(Array(zip(arr3.indices, arr3)), id: \.0) { i, iitem in
//                    HStack(alignment: .center, spacing: 1) {
//                        ForEach(Array(zip(iitem.indices, iitem)), id: \.0) { j, jitem in
//                            ZStack {
//                                RoundedRectangle(cornerRadius: 5, style: .continuous)
//                                    .foregroundColor(.black)
//                                RoundedRectangle(cornerRadius: 5, style: .continuous)
//                                    .foregroundColor(jitem >= 0 ? .green : .red)
//                                    .opacity(abs(jitem))
//                            }
//                            .aspectRatio(1, contentMode: .fit)
//                            .border(accColor.opacity(currentIndexes.contains([i,j]) ? 1 : 0))
//                        }
//                    }
//                }
//            }
        }
        .task() {
            await run()
        }
    }
    
    func run() async {
        // init with same size
        arr3 = Array(repeating: Array(repeating: 0, count: arr2[0].count - kernel[0].count + 1), count: arr2.count - kernel.count + 1)
        
        // calculate conv2d
        for i in 0...arr2.count - kernel.count {
            for j in 0...arr2[0].count - kernel[0].count {
                var sum = 0.0
                currentIndexes = [[i,j]]
                for n in 0..<kernel.count {
                    for m in 0..<kernel[0].count {
                        sum += arr2[i + n][j + m] * kernel[n][m]
                    }
                }
                arr3[i][j] = sum
            }
        }
    }
    
    func getKernelOverlap(i: Int, j: Int) -> Bool {
        if currentIndexes.count == 0 {
            return false
        }
        if i - currentIndexes[0][0] < kernel.count && i - currentIndexes[0][0] > -1 {
            if j - currentIndexes[0][1] < kernel[0].count && j - currentIndexes[0][1] > -1 {
                return true
            }
        }
        return false
    }
}

struct Thumbnail_Previews: PreviewProvider {
    static var previews: some View {
        Thumbnail()
    }
}
